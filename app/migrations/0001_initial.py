# Generated by Django 3.2.6 on 2021-11-16 18:44

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Union',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('world_no', models.IntegerField(default=1)),
            ],
            options={
                'unique_together': {('name', 'world_no')},
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=14, unique=True)),
                ('is_candidate', models.BooleanField(default=False)),
                ('role', models.IntegerField(choices=[(0, 'CHAIRMAN'), (1, 'MEMBER'), (2, 'WORDCHAIRMAN'), (3, 'CITIZEN')], default=3)),
                ('gender', models.IntegerField(choices=[(0, 'MALE'), (1, 'FEMALE'), (2, 'OTHERS')], default=0)),
                ('education', models.CharField(blank=True, max_length=500, null=True)),
                ('address', models.CharField(max_length=200)),
                ('brand', models.ImageField(blank=True, null=True, upload_to='brand')),
                ('nid', models.CharField(max_length=200)),
                ('age', models.IntegerField(default=18)),
                ('date_of_birth', models.DateField(default=datetime.date.today)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='user')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('union_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_union', to='app.union')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
